services:
  db:
    image: postgres:13
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5433"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  alembic:
    build:
      context: .
      dockerfile: backend/Dockerfile.migrations
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: fastapi_backend
    volumes:
      - uploads:/app/uploads
      - ./common:/app/common
    restart: always
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      GATEWAY_TOKEN: ${GATEWAY_TOKEN}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v1/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s  # Даем время на запуск FastAPI и подключение к зависимостям

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
      args:
        - ENV=${ENV}
        - VITE_API_URL=${VITE_API_URL}
        - VITE_FRONTEND_HOST=${FRONTEND_HOST}
    volumes:
      - uploads:/usr/share/nginx/html/uploads
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
      - VITE_FRONTEND_HOST=${FRONTEND_HOST}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: telegram_bot
    depends_on:
      backend:
        condition: service_healthy  # Теперь ждет готовности backend
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - uploads:/app/uploads
      - ./common:/app/common

  redis:
    image: redis:6
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --port ${REDIS_PORT} --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "${REDIS_PORT}", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

volumes:
  postgres_data:
  rabbitmq_data:
  uploads:
  redis_data:
