# Stage 1: Сборка зависимостей
FROM python:3.12-slim AS builder

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем uv
COPY --from=ghcr.io/astral-sh/uv:0.4.15 /uv /bin/uv

# Обновление PATH
ENV PATH="/app/.venv/bin:$PATH"
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Установка зависимостей через uv
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=backend/uv.lock,target=uv.lock \
    --mount=type=bind,source=backend/pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project

# Копируем файлы проекта
COPY common /app/common
COPY alembic /app/alembic
COPY alembic.ini /app/
COPY backend/pyproject.toml backend/uv.lock /app/

# Установка зависимостей для приложения
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync

# Stage 2: Финальный образ
FROM python:3.12-slim

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем виртуальное окружение из builder
COPY --from=builder /app/.venv /app/.venv

# Копируем файлы проекта
COPY --from=builder /app/common /app/common
COPY --from=builder /app/alembic /app/alembic
COPY --from=builder /app/alembic.ini /app/
# COPY --from=builder /app/backend/pyproject.toml /app/
# COPY --from=builder /app/backend/uv.lock /app/

# Обновление PATH
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH=/app

# Выполняем миграции Alembic
CMD ["alembic", "upgrade", "head"]