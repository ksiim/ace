"""reworked all models

Revision ID: 929567afcbc2
Revises: d15ef9c1ad03
Create Date: 2025-02-15 17:16:09.862076

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '929567afcbc2'
down_revision: Union[str, None] = 'd15ef9c1ad03'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tournaments',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_child', sa.Boolean(), nullable=False),
    sa.Column('photo', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('organizer_name_and_contacts', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('organizer_requisites', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('can_register', sa.Boolean(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prize_fund', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('sex_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ),
    sa.ForeignKeyConstraint(['sex_id'], ['sex.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournament_participants',
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('categories', sa.Column('is_child', sa.Boolean(), nullable=False))
    op.drop_column('categories', 'shortname')
    op.drop_column('categories', 'child')
    op.add_column('sex', sa.Column('shortname', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('users', sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True))
    op.add_column('users', sa.Column('surname', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True))
    op.add_column('users', sa.Column('patronymic', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_index('ix_users_telegram_id', table_name='users')
    op.drop_column('users', 'from_who')
    op.drop_column('users', 'is_organizer')
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'start_time')
    op.drop_column('users', 'telegram_id')
    op.drop_column('users', 'username')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('telegram_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_organizer', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('from_who', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_index('ix_users_telegram_id', 'users', ['telegram_id'], unique=True)
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'patronymic')
    op.drop_column('users', 'surname')
    op.drop_column('users', 'name')
    op.drop_column('sex', 'shortname')
    op.add_column('categories', sa.Column('child', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('categories', sa.Column('shortname', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('categories', 'is_child')
    op.create_table('users_pairs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user1_fio', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user2_fio', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tournament_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments_duo.id'], name='users_pairs_tournament_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='users_pairs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pairs_pkey')
    )
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_link', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('operation_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('months', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='transactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('tournaments_solo',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tournaments_solo_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('photo_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organizer_name_and_contacts', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organizer_requisites', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organizer_telegram_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('can_register', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('prize_fund', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sex_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='tournaments_solo_category_id_fkey'),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name='tournaments_solo_region_id_fkey'),
    sa.ForeignKeyConstraint(['sex_id'], ['sex.id'], name='tournaments_solo_sex_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tournaments_solo_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('solo_tournament_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('fio', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tournament_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments_solo.id'], name='solo_tournament_members_tournament_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='solo_tournament_members_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='solo_tournament_members_pkey')
    )
    op.create_table('tournaments_duo',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('photo_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('organizer_name_and_contacts', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organizer_requisites', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organizer_telegram_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('can_register', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('prize_fund', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sex_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='tournaments_duo_category_id_fkey'),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name='tournaments_duo_region_id_fkey'),
    sa.ForeignKeyConstraint(['sex_id'], ['sex.id'], name='tournaments_duo_sex_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tournaments_duo_pkey')
    )
    op.drop_table('tournaments')
    op.drop_table('tournaments_duo')
    op.drop_table('solo_tournament_members')
    op.drop_table('tournaments_solo')
    op.drop_table('transactions')
    op.drop_table('users_pairs')
    op.drop_table('tournament_participants')
    # ### end Alembic commands ###
