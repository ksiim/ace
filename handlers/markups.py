import datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot import bot
from models.dbs.models import TournamentDuo, TournamentSolo, Trainer, UserPair
from models.dbs.orm import Orm

from .callbacks import *


from config import raw_sexs, raw_regions, raw_adult_categories

choose_sex_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞"
main_menu_text = "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
donate_text = """
<b>–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è!</b>

–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–∞–Ω–Ω—ã–π –±–æ—Ç, –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å, –º—ã –±—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –ª—é–±–æ–π —Å—É–º–º–µ. 

<code>2200701019118352</code> - –†–æ–º–∞–Ω (–¢-–±–∞–Ω–∫)

–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –¥—Ä—É–∑—å—è–º–∏ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞!

–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å –∏ –¥–æ–≤–µ—Ä–∏–µ!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º, ACE!
"""

prices = {
    '1': 199,
    '6': 1100,
    '12': 2100
}

statute_file_id = "BQACAgIAAyEFAASQpZJtAAMcZ4lyIZTXW4jrmTyVUJ9AT16Pa0AAAl5sAAL7RkhIW5Tf2e7pQXs2BA"
for_organizers_file_id = 'BQACAgIAAyEFAASQpZJtAAMbZ4lyIQRDY9JnWF3Q8QNlho4XuEgAAl1sAAL7RkhIP2xdIZJAg_A2BA'
for_clubs_file_id = 'BQACAgIAAyEFAASQpZJtAAMaZ4lyIWUh7gseghHD0X6q-5iEvWIAAlxsAAL7RkhIHuBjzvbVJe82BA'

documents_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–ª–æ–∂–µ–Ω–∏–µ",
                callback_data="about_us_document"
            )
        ],
        [
            InlineKeyboardButton(
                text="–î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤",
                callback_data="organizer_info"
            ),
            InlineKeyboardButton(
                text="–î–ª—è –∫–ª—É–±–æ–≤",
                callback_data="club_info"
            )
        ]
    ]
)

about_us_text = f"""
ü§ñ <b>–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</b>:

–ù–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å –ø–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π. –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏—Å–∫–∞—Ç—å –≥—Ä—É–ø–ø—ã –≤ –∫–∞–∂–¥–æ–º –≥–æ—Ä–æ–¥–µ, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ä—É—á–Ω—É—é

–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤—à–∏—Å—å –Ω–∞ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.

–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç—å —á–∞—Å—Ç—å –∑–∞—Ç—Ä–∞—Ç –¥–ª—è –µ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —á–∞—Å—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω—É–∂–¥–∞—é—â–∏–º—Å—è —é–Ω—ã–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–∞–º.

–¢–∞–∫ –∂–µ, –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Ü–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏!üéÅ

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —é–Ω–∏–æ—Ä-—Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç, –∫–æ—Ç–æ—Ä–æ–º—É –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫—É—é –ø–æ–º–æ—â—å –≤ –≤–∏–¥–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤!

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —ç—Ç–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π —Ç–µ–Ω–Ω–∏—Å–Ω–æ–π —Å–µ–º—å–∏!ü´∂


üåü <b>–ü—Ä–∞–π—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b> üåü

‚Ä¢ üìÖ <b>1 –º–µ—Å—è—Ü</b>: {prices['1']} ‚ÇΩ

‚Ä¢ üìÖ <b>6 –º–µ—Å—è—Ü–µ–≤</b>: {prices['6']} ‚ÇΩ

‚Ä¢ üìÖ <b>12 –º–µ—Å—è—Ü–µ–≤</b>: {prices['12']} ‚ÇΩ





–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ ACE —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –ª—é–±–æ–µ –∏–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫ –≤ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö."""

buy_subscription_text = """–î–ª—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! 

–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Ç—É—Ä–Ω–∏—Ä–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É—á–∞—Å—Ç–∏—é –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ACE, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞. 

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"""

need_to_subscribe_on_our_news_channel_text = "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª!"
admin_panel_text = "–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
trainers_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:"

trainer_back_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="back_to_trainers"
            )
        ]
    ]
)

admin_panel_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä",
                callback_data="add_tournament"
            ),
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä",
                callback_data="delete_tournament"
            )
        ],
        [
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
                callback_data="add_coach"
            ),
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
                callback_data="delete_coach"
            )
        ],
        [
            InlineKeyboardButton(
                text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                callback_data="do_a_mail"
            )
        ],
        [
            InlineKeyboardButton(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                callback_data="ref_statistics"
            ),
            InlineKeyboardButton(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="statistics"
            )
        ],
        [
            InlineKeyboardButton(
                text="–í—ã–¥–∞—Ç—å\–æ—Ç–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞",
                callback_data="change_organizer"
            )
        ]
    ]
)

subscribe_button_label = "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
subscription_button = KeyboardButton(
    text=subscribe_button_label)
tournament_calendar_label = "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—É—Ä–Ω–∏—Ä–æ–≤"
calendar_button = KeyboardButton(
    text=tournament_calendar_label)
partners_button_label = "/partners"
info_about_us_label = "‚ÑπÔ∏è –û –Ω–∞—Å"
about_us_button = KeyboardButton(
    text=info_about_us_label)
add_tournament_label = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
add_tournament_button = KeyboardButton(
    text=add_tournament_label)
my_tournaments_label = "üìã –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã"
my_tournaments_button = KeyboardButton(
    text=my_tournaments_label)
trainers_label = "/trainers"

tournament_add_back_button = InlineKeyboardButton(
    text="–ù–∞–∑–∞–¥",
    callback_data="back_add_tournament"
)

partners_text = "–ü–∞—Ä—Ç–Ω–µ—Ä—ã"

confirm_mail_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="confirm_mail:yes"
            ),
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="confirm_mail:no"
            )
        ]
    ]
)


async def generate_statistics_text():
    return f"""
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {await Orm.get_users_count()}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b> {await Orm.get_tournaments_count()}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:</b> {await Orm.get_trainers_count()}
<b>–ü—Ä–∏—à–ª–æ –≤—á–µ—Ä–∞:</b> {await Orm.get_yesterday_count()}
<b>–ü—Ä–∏—à–ª–æ —Å–µ–≥–æ–¥–Ω—è:</b> {await Orm.get_today_count()}
"""


async def generate_ref_statistics_text():
    referrals = await Orm.get_top_referrers()
    return f"""
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>

{'\n'.join([f'{referral["user"].full_name} - {referral["referral_count"]}' for referral in referrals])}
"""


async def generate_back_to_tournament_markup(tournament_id, tournament_type):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"tournament:{
                        tournament_type}:{tournament_id}"
                )
            ]
        ]
    )


async def generate_payment_markup(payment_link, transaction_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–ø–ª–∞—Ç–∏—Ç—å",
                    web_app=WebAppInfo(
                        url=payment_link,
                        display_name="–û–ø–ª–∞—Ç–∏—Ç—å"
                    )
                ),
                InlineKeyboardButton(
                    text="–Ø –æ–ø–ª–∞—Ç–∏–ª(-–∞)",
                    callback_data=f"check_sub_pay:{transaction_id}"
                )
            ]
        ]
    )


async def generate_buy_subcription_markup():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"1 –º–µ—Å—è—Ü ({prices['1']}‚ÇΩ)",
                    callback_data=f"buy_subscription:1"
                ),
                InlineKeyboardButton(
                    text=f"6 –º–µ—Å—è—Ü–µ–≤ ({prices['6']}‚ÇΩ)",
                    callback_data=f"buy_subscription:6"
                ),
            ],
            [
                InlineKeyboardButton(
                    text=f"12 –º–µ—Å—è—Ü–µ–≤ ({prices['12']}‚ÇΩ)",
                    callback_data=f"buy_subscription:12"
                )
            ]
        ]
    )


async def generate_main_menu_markup(telegram_id):
    user = await Orm.get_user_by_telegram_id(telegram_id)
    if user.is_organizer:
        return ReplyKeyboardMarkup(
            keyboard=[
                [calendar_button],
                [my_tournaments_button],
                [about_us_button],
                [add_tournament_button],
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [calendar_button],
                [my_tournaments_button],
                [subscription_button],
                [about_us_button],
            ],
            resize_keyboard=True
        )


async def generate_participants_text(tournament, participants):
    if isinstance(tournament, TournamentSolo):
        return f"""<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
{'\n '.join([participant.fio if not participant.confirmed else f'‚úÖ{participant.fio}' for participant in participants])}"""
    else:
        return f"""<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
{'\n '.join([f'{participant.user1_fio}/{f"{participant.user2_fio}" if participant.user2_fio else ""}' if not participant.confirmed else f'‚úÖ{participant.user1_fio}/{f"{participant.user2_fio}" if participant.user2_fio else ""}' for participant in participants])}"""


async def generate_tournament_markup(tournament, user_id):
    tournament_type = 'solo' if isinstance(
        tournament, TournamentSolo) else 'duo'
    register_or_cancel_button = InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        callback_data=f"register:{tournament.id}"
    )
    if await Orm.is_participant(tournament.id, user_id, tournament_type):
        register_or_cancel_button = InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=f"cancel_register:{tournament.id}"
        )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                register_or_cancel_button,
                InlineKeyboardButton(
                    text="–°–ø–∏—Å–æ–∫ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    callback_data=f"participants:{tournament_type}:{tournament.id}"
                )
            ],
        ]
    )
    participant = await Orm.get_tournament_participant(
        tournament.id, user_id, tournament_type)
    if isinstance(participant, UserPair):
        if participant.user2_fio is None:
            keyboard.inline_keyboard.append([InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                callback_data=f"partner:add:{participant.id}"
            )])
        else:
            keyboard.inline_keyboard.append([InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                callback_data=f"partner:del:{participant.id}"
            )])
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=f"type:{tournament_type}"
        )]
    )
    return keyboard


async def generate_check_tournament_payment_markup(tournament_type_str, participant_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"check_pay:{tournament_type_str}:{participant_id}"
                ),
            ]
        ]
    )


async def generate_confirm_tournament_payment_markup(tournament_type_str, participant_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"conf_pay:{tournament_type_str}:{participant_id}"
                ),
            ]
        ]
    )


async def generate_tournaments_keyboard_from_list(tournaments):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=format_tournament_info(tournament),
                    callback_data=f"tournament:{'solo' if isinstance(tournament, TournamentSolo) else 'duo'}:{tournament.id}"
                )
            ] for tournament in tournaments
        ]
    )


def format_tournament_info(tournament):
    return f'üìÜ {tournament.date.strftime("%d.%m")} üéæ{tournament.name[:20]}üéæ {tournament.category.shortname}'


async def generate_choose_tournament_keyboard(type_, region_id, sex_id):
    sex = await Orm.get_sex_by_id(sex_id)
    match type_:
        case 'solo':
            tournaments = await Orm.get_solo_tournaments_by_region_and_sex_name(region_id, sex.name)
        case 'duo':
            tournaments = await Orm.get_duo_tournaments_by_region_and_sex_name(region_id, sex.name)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=format_tournament_info(tournament),
                    callback_data=f"tournament:{'solo' if isinstance(tournament, TournamentSolo) else 'duo'}:{tournament.id}"
                )
            ] for tournament in tournaments
        ] + [[InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="back_to_sex"
        )]]
    )


async def generate_delete_tournament_markup(tournaments):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f'{tournament.name} {
                        tournament.date.strftime("%d.%m.%Y")}',
                    callback_data=f"delete_tour:{tournament.id}"
                )
            ] for tournament in tournaments
        ]
    )


async def generate_choose_type_of_delete_tournament_markup():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–¥–∏–Ω–æ—á–Ω—ã–π",
                    callback_data="deltourtype:solo"
                ),
                InlineKeyboardButton(
                    text="–ü–∞—Ä–Ω—ã–π",
                    callback_data="deltourtype:duo"
                )
            ]
        ]
    )


async def generate_choose_sex_to_delete_tournament_markup():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=sex.name,
                    callback_data=f"delsextour:{sex.id}"
                )
            ] for sex in await Orm.get_all_sexs()
        ]
    )


async def generate_choose_tournament_to_delete_markup(region_id, sex_id, type_):
    match type_:
        case 'solo':
            tournaments = await Orm.get_solo_tournaments_by_region_and_sex_id(region_id, sex_id)
        case 'duo':
            tournaments = await Orm.get_duo_tournaments_by_region_and_sex_id(region_id, sex_id)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f'{tournament.name} {
                        tournament.date.strftime("%d.%m.%Y")}',
                    callback_data=f"del_tour:{tournament.id}"
                )
            ] for tournament in tournaments
        ]
    )

confirm_delete_tournament_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="conf_del_tour:yes"
            ),
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="conf_del_tour:no"
            )
        ]
    ]
)


async def generate_start_text(message):
    return f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø - –±–æ—Ç. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è.'


async def generate_tournament_text(tournament):
    if isinstance(tournament, TournamentSolo):
        return await generate_tournament_solo_text(tournament)
    else:
        return await generate_tournament_duo_text(tournament)


async def generate_tournament_solo_text(tournament: TournamentSolo):
    return f"""
{tournament.region.name}
{tournament.date.strftime("%d.%m.%Y")}
–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {tournament.address}
–û–¥–∏–Ω–æ—á–Ω—ã–π {tournament.sex.name.lower()} —Ç—É—Ä–Ω–∏—Ä

{tournament.name}
{tournament.category.name}{f'\–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ {tournament.prize_fund}‚ÇΩ' if tournament.prize_fund else ''}
–í–∑–Ω–æ—Å {tournament.price}‚ÇΩ

–ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è {tournament.organizer_name_and_contacts}

–°—Ç–∞—Ç—É—Å: {await generate_tournament_status(tournament)}
"""


async def generate_tournament_status(tournament):
    date = tournament.date
    now = datetime.datetime.now()
    days_left = (date - now).days

    if days_left > 14:
        return "–æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    elif days_left > 4:
        return "–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫"
    else:
        return "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫"


async def generate_tournament_duo_text(tournament: TournamentDuo):
    return f"""
{tournament.region.name}
{tournament.date.strftime("%d.%m.%Y")}
–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {tournament.address}
–ü–∞—Ä–Ω—ã–π {tournament.sex.name.lower()} —Ç—É—Ä–Ω–∏—Ä

{tournament.name}
{tournament.category.name}{f'\–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ {tournament.prize_fund}‚ÇΩ' if tournament.prize_fund else ''}
–í–∑–Ω–æ—Å {tournament.price}‚ÇΩ

–ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è {tournament.organizer_name_and_contacts}

–°—Ç–∞—Ç—É—Å: {await generate_tournament_status(tournament)}
"""

confirm_tournament_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="confirm_tournament:yes"
            ),
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="confirm_tournament:no"
            )
        ]
    ]
)


async def generate_choose_region_markup(subtext):
    regions = await Orm.get_all_regions()
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{region.name} ({await Orm.get_count_of_tournaments_by_region_id(region.id) if subtext in ['see_tournaments', 'del_tour_region', 'crad'] else await Orm.get_count_of_trainers_by_region_id(region.id)})",
                callback_data=f"{subtext}:{region.id}"
            )] for region in regions
        ] + [[
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="main_menu"
            )
        ]]
    )
    return markup


async def generate_choose_sex_keyboard(from_where: str, region_id: int):
    sexs = await Orm.get_all_sexs()
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{sex.name} ({await Orm.get_count_of_tournaments_by_region_and_sex_id(region_id, sex.id)})",
                    callback_data=f'sex:{sex.id}'
                )
            ] for sex in sexs if sex.name != raw_sexs[3]
        ] + [[InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=f"back_to_regions:{from_where}"
        )]]
    )
    return markup


async def generate_change_region_text(telegram_id):
    user = await Orm.get_user_by_telegram_id(telegram_id)
    return f"–¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: {user.region.name}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:"


async def generate_trainer_text(trainer: Trainer):
    return f"""
<b>–ò–º—è:</b> {trainer.name}
<b>–†–µ–≥–∏–æ–Ω:</b> {trainer.region.name}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {trainer.description}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainer.phone}
<b>–ê–¥—Ä–µ—Å —Ä–∞–±–æ—Ç—ã:</b> {trainer.address}
"""

confirm_add_trainer_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="confirm_add_trainer:yes"
            ),
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="confirm_add_trainer:no"
            )
        ]
    ]
)

confirm_delete_trainer_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="confirm_delete_trainer:yes"
            ),
            InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="confirm_delete_trainer:no"
            )
        ]
    ]
)


async def generate_trainers_markup(trainers: list[Trainer], subtext="trainer", from_where="see_coaches"):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=trainer.name,
                    callback_data=f"{subtext}:{trainer.id}"
                )
            ] for trainer in trainers
        ] + [[
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=f"back_to_regions:{from_where}"
            )
        ]]
    )


async def generate_channel_markup():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                url="https://t.me/Ace_news_channel"
            )],
            [InlineKeyboardButton(
                text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å)",
                callback_data="check_channel"
            )]
        ]
    )


async def generate_choose_tournament_type_keyboard(sex_id, region_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–û–¥–∏–Ω–æ—á–Ω—ã–π ({await Orm.get_count_of_types_tournaments_by_region_and_sex_id(TournamentSolo, region_id, sex_id)})",
                    callback_data="type:solo"
                ),
                InlineKeyboardButton(
                    text=f"–ü–∞—Ä–Ω—ã–π ({await Orm.get_count_of_types_tournaments_by_region_and_sex_id(TournamentDuo, region_id, sex_id)})",
                    callback_data="type:duo"
                )
            ],
            [InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="calendar_of_tournaments"
            )]
        ]
    )


async def generate_choose_type_of_tournament_markup():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–¥–∏–Ω–æ—á–Ω—ã–π",
                    callback_data="att:solo"
                ),
                InlineKeyboardButton(
                    text="–ü–∞—Ä–Ω—ã–π",
                    callback_data="att:duo"
                )
            ]
        ]
    )


async def generate_choose_category_of_tournament_markup(sex_id):
    sex = await Orm.get_sex_by_id(sex_id)
    if sex.name == raw_sexs[2]:
        categories = await Orm.get_child_categories()
    else:
        categories = await Orm.get_adult_categories()
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=category.name,
                callback_data=f"ccat:{category.id}"
            )] for category in categories
        ]
    )
    return markup


async def generate_choose_sex_of_tournament_markup():
    sexs = await Orm.get_all_sexs()
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=sex.name,
                callback_data=f'csot:{sex.id}'
            )] for sex in sexs
        ]
    )
    return markup

can_register_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–∞",
                callback_data="can_register:yes"
            ),
            InlineKeyboardButton(
                text="–ù–µ—Ç",
                callback_data="can_register:no"
            )
        ],
        [
            tournament_add_back_button
        ]
    ]
)
